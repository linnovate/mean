#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , mkdirp = require('mkdirp')
  , pkg = require('../package.json')
  , version = pkg.version
  , os = require('os')
  , fs = require('fs')
  , path = require('path');

// CLI

program
  .version(version)
  .usage('[dir]')
  .parse(process.argv);

// dest

var dest = program.args.shift() || '.';

// end-of-line code

//var eol = os.EOL

// Generate application

(function createApplication(dest) {
  emptyDirectory(dest, function (empty) {
    if (empty || program.force) {
      createApplicationAt(dest);
    } else {
      program.confirm('destination is not empty, continue? ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(dest);
        } else {
          program.confirm('destination is not empty, continue? ', function (ok) {
            if (ok) {
              process.stdin.destroy();
              createApplicationAt(path);
            } else {
              abort('aborting');
            }
          });
        }
      });
    }
  });
})(dest);


/**
 * Check if the given directory `dest` is empty.
 *
 * @param {String} dest
 * @param {Function} fn
 */

function emptyDirectory(dest, fn) {
  fs.readdir(dest, function (err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Re-creates recursively the setup folder at destination
 *
 * @param to
 * @param str
 */
function copyFiles(from, to) {
  if (from === null) from = path.join(__dirname, '..', 'setup');
  fs.readdir(from, function (from, to, err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    files.forEach(function (from, to, file) {
      fs.stat(path.join(from, file), function (from, to, err, meta) {
        if (err) throw err;

        var dest = path.join(to, file);

        if (meta.isDirectory()) {
          mkdir(dest, function () {
          });
          copyFiles(path.join(from, file), dest);
        } else {
          write(path.join(from, file), dest);
        }
      }.bind(null, from, to));
    }.bind(null, from, to));
  }.bind(null, from, to));
}

/**
 * echo str > dest.
 *
 * @param {String} dest
 * @param {String} str
 */

function write(from, to) {
  fs.readFile(from, function (err, data) {
    if (err) throw err;
    fs.writeFile(to, data, function () {
      console.log('   \x1b[36mcreate file\x1b[0m : ' + to);
    });
  });
}

/**
 * Mkdir -p.
 *
 * @param {String} dest
 * @param {Function} fn
 */

function mkdir(dest, fn) {
  mkdirp(dest, 0755, function (err) {
    if (err) throw err;
    console.log('   \033[36mcreate directory\033[0m : ' + dest);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}

/**
 * Create application at the given directory `dest`.
 *
 * @param {String} dest
 */

function createApplicationAt(dest) {
  console.log();
  //ToDo go home and finish this function later
  copyFiles(null, dest);
}